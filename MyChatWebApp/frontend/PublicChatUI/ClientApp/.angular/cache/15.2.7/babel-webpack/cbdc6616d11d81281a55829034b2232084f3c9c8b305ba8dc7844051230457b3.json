{"ast":null,"code":"import _asyncToGenerator from \"D:/Examples/MyChatWebApp/frontend/PublicChatUI/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as signalR from '@microsoft/signalr'; // import signalR\nimport { MessageDto } from '../Dto/MessageDto';\nimport { Subject } from 'rxjs';\nimport { environment } from './../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(http) {\n    var _this = this;\n    this.http = http;\n    this.connection = new signalR.HubConnectionBuilder().withUrl(environment.hubConnectionURL) // mapping to the chathub as in startup.cs\n    .configureLogging(signalR.LogLevel.Information).build();\n    this.POST_URL = environment.broadcastURL;\n    this.receivedMessageObject = new MessageDto();\n    this.sharedObj = new Subject();\n    this.connection.onclose( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield _this.start();\n    }));\n    this.connection.on(\"ReceiveOne\", (user, message) => {\n      this.mapReceivedMessage(user, message);\n    });\n    this.start();\n  }\n  // Strart the connection\n  start() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.connection.start();\n        console.log(\"connected\");\n      } catch (err) {\n        console.log(err);\n        setTimeout(() => _this2.start(), 5000);\n      }\n    })();\n  }\n  mapReceivedMessage(user, message) {\n    this.receivedMessageObject.user = user;\n    this.receivedMessageObject.msgText = message;\n    this.sharedObj.next(this.receivedMessageObject);\n  }\n  /* ****************************** Public Mehods **************************************** */\n  // Calls the controller method\n  broadcastMessage(msgDto) {\n    this.http.post(this.POST_URL, msgDto).subscribe(data => console.log(data));\n    // this.connection.invoke(\"SendMessage1\", msgDto.user, msgDto.msgText).catch(err => console.error(err));    // This can invoke the server method named as \"SendMethod1\" directly.\n  }\n\n  retrieveMappedObject() {\n    return this.sharedObj.asObservable();\n  }\n}\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n};\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,OAAO,KAAKA,OAAO,MAAM,oBAAoB,CAAC,CAAU;AAExD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAAqBC,OAAO,QAAQ,MAAM;AAC1C,SAASC,WAAW,QAAQ,kCAAkC;;;AAK9D,OAAM,MAAOC,WAAW;EAYtBC,YAAoBC,IAAgB;IAAA;IAAhB,SAAI,GAAJA,IAAI;IATd,eAAU,GAAQ,IAAIN,OAAO,CAACO,oBAAoB,EAAE,CAACC,OAAO,CAACL,WAAW,CAACM,gBAAgB,CAAC,CAAG;IAAA,CAC/DC,gBAAgB,CAACV,OAAO,CAACW,QAAQ,CAACC,WAAW,CAAC,CAC9CC,KAAK,EAAE;IACrC,aAAQ,GAAGV,WAAW,CAACW,YAAY;IAGrC,0BAAqB,GAAe,IAAIb,UAAU,EAAE;IACpD,cAAS,GAAG,IAAIC,OAAO,EAAc;IAG3C,IAAI,CAACa,UAAU,CAACC,OAAO,iCAAC,aAAW;MACjC,MAAM,KAAI,CAACC,KAAK,EAAE;IACpB,CAAC,EAAC;IACH,IAAI,CAACF,UAAU,CAACG,EAAE,CAAC,YAAY,EAAE,CAACC,IAAI,EAAEC,OAAO,KAAI;MAAG,IAAI,CAACC,kBAAkB,CAACF,IAAI,EAAEC,OAAO,CAAC;IAAE,CAAC,CAAC;IAChG,IAAI,CAACH,KAAK,EAAE;EACb;EAGA;EACaA,KAAK;IAAA;IAAA;MAChB,IAAI;QACF,MAAM,MAAI,CAACF,UAAU,CAACE,KAAK,EAAE;QAC7BK,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;OACzB,CAAC,OAAOC,GAAG,EAAE;QACZF,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;QAChBC,UAAU,CAAC,MAAM,MAAI,CAACR,KAAK,EAAE,EAAE,IAAI,CAAC;;IACrC;EACH;EAEQI,kBAAkB,CAACF,IAAY,EAAEC,OAAe;IACtD,IAAI,CAACM,qBAAqB,CAACP,IAAI,GAAGA,IAAI;IACtC,IAAI,CAACO,qBAAqB,CAACC,OAAO,GAAGP,OAAO;IAC5C,IAAI,CAACQ,SAAS,CAACC,IAAI,CAAC,IAAI,CAACH,qBAAqB,CAAC;EAClD;EAEC;EAEA;EACOI,gBAAgB,CAACC,MAAW;IACjC,IAAI,CAACzB,IAAI,CAAC0B,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAEF,MAAM,CAAC,CAACG,SAAS,CAACC,IAAI,IAAIb,OAAO,CAACC,GAAG,CAACY,IAAI,CAAC,CAAC;IAC1E;EACF;;EAEOC,oBAAoB;IACzB,OAAO,IAAI,CAACR,SAAS,CAACS,YAAY,EAAE;EACtC;;AAhDWjC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YAFV;AAAM","names":["signalR","MessageDto","Subject","environment","ChatService","constructor","http","HubConnectionBuilder","withUrl","hubConnectionURL","configureLogging","LogLevel","Information","build","broadcastURL","connection","onclose","start","on","user","message","mapReceivedMessage","console","log","err","setTimeout","receivedMessageObject","msgText","sharedObj","next","broadcastMessage","msgDto","post","POST_URL","subscribe","data","retrieveMappedObject","asObservable","factory","providedIn"],"sourceRoot":"","sources":["D:\\Examples\\MyChatWebApp\\frontend\\PublicChatUI\\ClientApp\\src\\app\\services\\chat.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport * as signalR from '@microsoft/signalr';          // import signalR\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MessageDto } from '../Dto/MessageDto';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { environment } from './../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n\r\n\r\n   private  connection: any = new signalR.HubConnectionBuilder().withUrl(environment.hubConnectionURL)   // mapping to the chathub as in startup.cs\r\n                                         .configureLogging(signalR.LogLevel.Information)\r\n                                         .build();\r\n   readonly POST_URL = environment.broadcastURL;\r\n\r\n\r\n  private receivedMessageObject: MessageDto = new MessageDto();\r\n  private sharedObj = new Subject<MessageDto>();\r\n\r\n  constructor(private http: HttpClient) { \r\n    this.connection.onclose(async () => {\r\n      await this.start();\r\n    });\r\n   this.connection.on(\"ReceiveOne\", (user, message) => { this.mapReceivedMessage(user, message); });\r\n   this.start();                 \r\n  }\r\n\r\n\r\n  // Strart the connection\r\n  public async start() {\r\n    try {\r\n      await this.connection.start();\r\n      console.log(\"connected\");\r\n    } catch (err) {\r\n      console.log(err);\r\n      setTimeout(() => this.start(), 5000);\r\n    } \r\n  }\r\n\r\n  private mapReceivedMessage(user: string, message: string): void {\r\n    this.receivedMessageObject.user = user;\r\n    this.receivedMessageObject.msgText = message;\r\n    this.sharedObj.next(this.receivedMessageObject);\r\n }\r\n\r\n  /* ****************************** Public Mehods **************************************** */\r\n\r\n  // Calls the controller method\r\n  public broadcastMessage(msgDto: any) {\r\n    this.http.post(this.POST_URL, msgDto).subscribe(data => console.log(data));\r\n    // this.connection.invoke(\"SendMessage1\", msgDto.user, msgDto.msgText).catch(err => console.error(err));    // This can invoke the server method named as \"SendMethod1\" directly.\r\n  }\r\n\r\n  public retrieveMappedObject(): Observable<MessageDto> {\r\n    return this.sharedObj.asObservable();\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}